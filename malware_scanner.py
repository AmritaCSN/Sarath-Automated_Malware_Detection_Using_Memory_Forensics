#!/usr/bin/python3

#Importing Libraries
import sys, os, shutil, subprocess, requests
import time, csv, re, ipaddress, hashlib
from IPython.utils.io import Tee
from contextlib import closing

#Path to volatility3 python file
with open('volatility_path.txt','r') as volatility_file:
    vol_path=volatility_file.readline().strip()
volatility3_path = vol_path.split('=')[1].strip('"')

#VirusTotal API KEY
with open('virustotal_api_key.txt','r') as key_file:
    line=key_file.readline().strip()
VT_API_KEY=line.split('=')[1].strip('"')

#Output filename
t = time.localtime()
timestamp = time.strftime('%b-%d-%Y_%H%M%S', t)
output_dir_name="ouput_dir_"+timestamp
parent_dir="./"
output_dir_path=os.path.join(parent_dir,output_dir_name)
os.mkdir(output_dir_path)

output_filename = "MalScan_"+timestamp+".txt"
extracted_dir_name = "extracted_ps_"+timestamp
output_file_path = output_dir_path+"/"+output_filename

#Suspect PIDs
suspect_pids=set()

def title():
    print("""\033[1m
--------------------------------------------------------------------------------------------
    ___  ___      _                           ______                                 
    |  \/  |     | |                         / ____|                                
    | \  / | __ _| |_      ____ _ _ __ ___  | (___   ___ __ _ _ __  _ __   ___ _ __ 
    | |\/| |/ _` | \ \ /\ / / _` | '__/ _ \  \___ \ / __/ _` | '_ \| '_ \ / _ \ '__|
    | |  | | (_| | |\ V  V / (_| | | |  __/  ____) | (_| (_| | | | | | | |  __/ |   
    |_|  |_|\__,_|_| \_/\_/ \__,_|_|  \___| |_____/ \___\__,_|_| |_|_| |_|\___|_|   
                                                                                
--------------------------------------------------------------------------------------------                                                                               
Code by: Sarath J Nair
NOTE: Absolute path to memory image should be given as commandline argument.
--------------------------------------------------------------------------------------------
    \033[0m""")

def imageinfo(input_path):
    #Volatility3 - windows.info
    
    info_command = ['python3', volatility3_path, '-f', input_path, 'windows.info']
    info_result = subprocess.run(info_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    
    if(info_result.returncode == 0):
        with open(output_file_path,"a") as output_file:
            output_file.write(f"""
---------------------------------------------------------------------------------------------
  __  __                            _             _         _      ___                   _   
 |  \/  |___ _ __  ___ _ _ _  _    /_\  _ _  __ _| |_  _ __(_)___ | _ \___ _ __  ___ _ _| |_ 
 | |\/| / -_) '  \/ _ \ '_| || |  / _ \| ' \/ _` | | || (_-< (_-< |   / -_) '_ \/ _ \ '_|  _|
 |_|  |_\___|_|_|_\___/_|  \_, | /_/ \_\_||_\__,_|_|\_, /__/_/__/ |_|_\___| .__/\___/_|  \__|
                           |__/                     |__/                  |_|                
Report Timestamp: {timestamp}
---------------------------------------------------------------------------------------------\n\n""")

        with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
            print("\n-----------------------------------------Image Info-----------------------------------------")
            print(info_result.stdout)
            print("--------------------------------------------------------------------------------------------\n")

    else:
        print('Error:', info_result.stderr)
        #print('Return Code:', info_result.returncode)
        exit()

def cmdline(input_path):
    #Volatility3 - windows.cmdline

    #Writing to output file and stdout
    with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
        print(f"\nExecuting windows.cmdline plugin on the memory image.")

    cmdline_command = ['python3', volatility3_path, '-f', input_path, 'windows.cmdline']
    cmdline_result = subprocess.run(cmdline_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

    if cmdline_result.returncode != 0:
        print(f"Error: {cmdline_result.stderr}")
        exit(1)

    # Using regex to split lines into fields, preserving quoted text
    rows = []
    pattern = r'([^"\s]\S*|".+?")'  # Matches non-space sequences or quoted text
    for line in cmdline_result.stdout.strip().split('\n'):
        columns = re.findall(pattern, line)
        # Remove quotes from quoted elements
        columns = [col.replace('"', '') for col in columns]
        rows.append(columns)

    # Define CSV file name
    csv_file = output_dir_path+"/cmdline_output.csv"

    # Write to CSV
    with open(csv_file, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(rows)
    
    #Writing to output file and stdout
    with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
        print(f"\nwindows.cmdline output saved to {csv_file}\n")

    default_locations = ["c:\\windows\\system32\\", "required", "\\systemroot\\system32\\", "c:\\programdata\\microsoft\\", "c:\\program files (x86)\\", "c:\\windows\\systemapps\\", "%systemroot%\\system32\\"]
    #Reading the csv file
    with open(csv_file,'r') as file:
        reader = csv.reader(file)
        for i,row in enumerate(reader):
            if i>3:
                #if row[2].lower() not in default_locations:
                value_lower=row[2].lower()
                if not any(value_lower.startswith(location) for location in default_locations):
                   suspect_pids.add(row[0])
                   #print(f"\n{value_lower}")
    print(f"Suspicious PIDs: {suspect_pids}")

def psscan(input_path):
    #Volatility3 - windows.psscan

    #Writing to output file and stdout
    with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
        print(f"\nExecuting windows.psscan plugin on the memory image.")

    psscan_command = ['python3', volatility3_path, '-f', input_path, 'windows.psscan']
    psscan_result = subprocess.run(psscan_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

    if psscan_result.returncode != 0:
        print(f"Error: {psscan_result.stderr}")
        exit(1)

    # Using regex to split lines into fields, preserving quoted text
    rows = []
    pattern = r'([^"\s]\S*|".+?")'  # Matches non-space sequences or quoted text
    for line in psscan_result.stdout.strip().split('\n'):
        columns = re.findall(pattern, line)
        # Remove quotes from quoted elements
        columns = [col.replace('"', '') for col in columns]
        rows.append(columns)

    # Define CSV file name
    csv_file = output_dir_path+"/psscan_output.csv"

    # Write to CSV
    with open(csv_file, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(rows)

    #Writing to output file and stdout
    with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
        print(f"\nwindows.psscan output saved to {csv_file}\n")

    ps_values=[]
    with open(csv_file, newline='') as csvfile:
        reader = csv.reader(csvfile)
        for i,row in enumerate(reader):
            if i>3:
                ps_values.append(row[2])

    # Read default processes from text file
    with open("default_processes.txt", 'r') as file:
      file_reader = file.read()
    
    # Check each process name if available in default list of process
    for p_name in ps_values:
        if p_name not in file_reader:
            #print(p_name)
            suspect_pids.add(row[0])
    print(f"Suspicious PIDs: {suspect_pids}")

def netscan(input_path):
    #Volatility3 - windows.netscan

    #Writing to output file and stdout
    with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
        print(f"\nExecuting windows.netscan plugin on the memory image.")

    netscan_command = ['python3', volatility3_path, '-f', input_path, 'windows.netscan']
    netscan_result = subprocess.run(netscan_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

    if netscan_result.returncode != 0:
        print(f"Error: {netscan_result.stderr}")
        exit(1)

    # Using regex to split lines into fields, preserving quoted text
    rows = []
    pattern = r'([^"\s]\S*|".+?")'  # Matches non-space sequences or quoted text
    for line in netscan_result.stdout.strip().split('\n'):
        columns = re.findall(pattern, line)
        # Remove quotes from quoted elements
        columns = [col.replace('"', '') for col in columns]
        rows.append(columns)

    # Define CSV file name
    csv_file = output_dir_path+"/netscan_output.csv"

    # Write to CSV
    with open(csv_file, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(rows)

    #Writing to output file and stdout
    with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
        print(f"\nwindows.netscan output saved to {csv_file}\n")

    net_values=[]
    with open(csv_file, newline='') as csvfile:
        reader = csv.reader(csvfile)
        for i,row in enumerate(reader):
            if(i>3):
                ip_add=row[4]
                try:
                    ip=ipaddress.ip_address(ip_add)
                except:
                    continue
                else:
                    if(ip!=ipaddress.ip_address('0.0.0.0') and ip_add!='::'):
                        p_id=row[6]
                        if(p_id.isnumeric()):
                            suspect_pids.add(p_id)
                            #print(f"\nnetscan - {ip} : {p_id}")
                        else:
                            p_id=row[7]
                            if(p_id.isnumeric()):
                                suspect_pids.add(p_id)
                                #print(f"\nnetscan - {ip} : {p_id}")

def filedump(input_path):
    path=os.path.join(output_dir_path,extracted_dir_name)
    os.mkdir(path)

    #suspect_pids=['5672', '836', '4912', '5340', '2348', '4988', '5492', '828', '576', '2748', '4208', '6776', '444', '2716', '5140', '596']
    
    #Writing to output file and stdout
    with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
        print(f"\nExecuting windows.dumpfiles plugin to dump the suspicious processes.")

    #Volatility3 - windows.dumpfiles
    for pid in suspect_pids:
        path_pid=path+f"/{pid}"
        os.mkdir(path_pid)
        dumpfile_command = ['python3', volatility3_path, '-f', input_path, '-o', path_pid, 'windows.dumpfiles', '--pid', str(pid)]
        dumpfile_result = subprocess.run(dumpfile_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        if dumpfile_result.returncode != 0:
            print(f"Error: {dumpfile_result.stderr}")
            exit(1) 
    
    #Writing to output file and stdout
    with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
        print(f"\nDumped processes are avaible in the directory {path}\n")


def file_submit():
    #suspect_pids=['5672', '836', '4912', '5340', '2348', '4988', '5492', '828', '576', '2748', '4208', '6776', '444', '2716', '5140', '596']
    #parent_dir='extracted_ps_Nov-21-2023_230527'

    #Writing to output file and stdout
    with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
        print(f"\nSubmitting the suspicious files to VirusTotal.")
        print("\n--------------------------------------------------------------------------------------------\n")

    parent_dir=os.path.join(output_dir_path,extracted_dir_name)
    for pid in suspect_pids:
        path_pid=parent_dir+f"/{pid}"
        for filename in os.listdir(path_pid):
            #Full file path
            file_path = os.path.join(path_pid, filename)

            # Checking if it's an exe file image
            if os.path.isfile(file_path) and filename.endswith(".exe.img"):
                with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
                    print(f"Process ID : {pid}")
                    print(file_path)
                    VirusTotal(file_path)
                    print("\n--------------------------------------------------------------------------------------------\n")

def VirusTotal(file_path):
    #Uploading the file to VirusTotal
    upload_url = 'https://www.virustotal.com/api/v3/files'
    upload_files = {'file': (file_path, open(file_path, 'rb'))}
    header = {'x-apikey': VT_API_KEY}
    try:
        upload_response = requests.post(upload_url, files=upload_files, headers=header)
    except ValueError as err:
        with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
            print('\nCheck the API Key value in "virustotal_api_key.txt" file. The file should contain only the correct key value.')
        exit(1)
    except:
        with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
            print('\nSomething went wrong while uploading the file to VirusTotal!')
        exit(1)

    if(upload_response.status_code==200):
        upload_result=upload_response.json()
        file_id=upload_result.get("data").get("id")
        with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
            print("\nSuccessfully uploaded file to VirusTotal.")
    else:
        with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
            print("\nFailed to upload file to VirusTotal!")
            print(f"\nStatus Code : {str(upload_response.status_code)}")
        exit(1)

    #Results from VirusTotal
    result_url = f'https://www.virustotal.com/api/v3/analyses/{file_id}'
    try:
        result_response = requests.get(result_url, headers=header)
    except ValueError as err:
        with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
            print('\nCheck the API Key value in "virustotal_api_key.txt" file. The file should contain only the correct key value.')
        exit(1)
    except:
        with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
            print('\nSomething went wrong while retrieving the result from VirusTotal!')
        exit(1)
 
    if(result_response.status_code ==200):
        res=result_response.json()
        status = res.get("data").get("attributes").get("status")
        if(status == "completed"):
            print(f"\nStatus : {status}")
            counts = res.get("data").get("attributes").get("stats")
            results = res.get("data").get("attributes").get("results")
            
            #Calling function print_results
            print_results(counts,results)
        
        elif(status == "queued"):
            print (f"\nStatus : {status}")
            with open(file_path, "rb") as fp:
                file_read = fp.read()
                file_hash = hashlib.sha256(file_read).hexdigest()
        
            hash_url = f'https://www.virustotal.com/api/v3/files/{file_hash}'
            try:
                response = requests.get(hash_url, headers = header)
            except ValueError as err:
                with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
                    print('\nCheck the API Key value in "virustotal_api_key.txt" file. The file should contain only the correct key value.')
                exit(1)
            except:
                with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
                    print('\nSomething went wrong while uploading the file hash to VirusTotal!')
                exit(1)

            if response.status_code == 200:
                result = response.json()
                if result.get("data").get("attributes").get("last_analysis_results"):
                    counts = result.get("data").get("attributes").get("last_analysis_stats")
                    results = result.get("data").get("attributes").get("last_analysis_results")
                    #Calling function print_results
                    print_results(counts,results)
            time.sleep(15)
    else:
        with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
            print("\nFailed to retrieve results from VirusTotal!")
            print(f"\nStatus Code : {str(result_response.status_code)}")
        exit(1)

def print_results(counts,results):
    with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
        print("\nSuccessfully retrieved result from VirusTotal.\n")
        print(f"\n\033[1;31m{counts.get('malicious')} security vendors identified the file as Malicious.\033[0m")
        print(f"\n\033[1;32m{counts.get('undetected')} security vendors identifies the file as Clean.\n\033[0m")

        if(counts.get('malicious')>0):
            print("\n--------------------------------------------------------------------------------------------")
            print("Security Vendors that flagged the file as malicious")
            print("--------------------------------------------------------------------------------------------\n")
            for i in results:
                if (results[i].get('category') == "malicious"):
                    print (f"Vendor  : {results[i].get('engine_name')}")
                    print (f"Version : {results[i].get('engine_version')}")
                    print (f"Variant : {results[i].get('result')}")
                    print (f"Updated : {results[i].get('engine_update')}")
                    print ("**************************************************")

def main():
    #Starting
    title()

    #Path to memory image as cmdline argument
    try:
        input_path = sys.argv[1]
    except:
        print("\033[1;31mGive abosolute path to the memory image as commandline argument.\033[0m")
        exit()
    else:
        print(f"The given memory image file path is: - \033[1;32m{input_path}\033[0m\n")

    #Volatility3 - Image Info
    imageinfo(input_path)

    #Volatility3 - cmdline
    cmdline(input_path)

    #Volatility3 - psscan
    psscan(input_path)

    #Volatility3 - netscan
    netscan(input_path)

    #Printing identified suspicious processes to output file and stdout
    with closing(Tee(output_file_path, "a", channel="stdout")) as outputstream:
        print("\n--------------------------------------------------------------------------------------------\n")
        print(f"\nIdentified suspicious Process IDs : {suspect_pids}")

    #Dumping the suspicious processes
    #Volaility3 - dumpfiles
    filedump(input_path)
    
    #Submitting files to VirusTotal
    file_submit()

if __name__=="__main__":
    main()
